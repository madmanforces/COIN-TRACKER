{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HSJ\\\\Desktop\\\\nellflix\\\\my-app\\\\src\\\\routes\\\\Chart.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"./api\";\nimport ApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chart(_ref) {\n  _s();\n\n  let {\n    coinId\n  } = _ref;\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading chart...\" : /*#__PURE__*/_jsxDEV(ApexChart, {\n      type: \"line\",\n      series: [{\n        name: \"Price\",\n        data: data === null || data === void 0 ? void 0 : data.map(price => price.close)\n      }],\n      options: {\n        theme: {\n          mode: \"dark\"\n        },\n        chart: {\n          height: 300,\n          width: 500,\n          toolbar: {\n            show: true\n          },\n          background: \"transparent\"\n        },\n        grid: {\n          show: false\n        },\n        stroke: {\n          curve: \"smooth\",\n          width: 4\n        },\n        yaxis: {\n          show: false\n        },\n        xaxis: {\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: false\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Chart, \"1zjW8LjbLVySvqo7jR/+Tc6m2Js=\", false, function () {\n  return [useQuery];\n});\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["C:/Users/HSJ/Desktop/nellflix/my-app/src/routes/Chart.tsx"],"names":["useQuery","fetchCoinHistory","ApexChart","Chart","coinId","isLoading","data","name","map","price","close","theme","mode","chart","height","width","toolbar","show","background","grid","stroke","curve","yaxis","xaxis","axisBorder","axisTicks","labels"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,gBAAT,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;;AAiBA,SAASC,KAAT,OAAwC;AAAA;;AAAA,MAAzB;AAAEC,IAAAA;AAAF,GAAyB;AACpC,QAAM;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,MAAoBN,QAAQ,CAAe,CAAC,OAAD,EAAUI,MAAV,CAAf,EAAkC,MAAMH,gBAAgB,CAACG,MAAD,CAAxD,CAAlC;AACA,sBACE;AAAA,cACGC,SAAS,GACR,kBADQ,gBAGR,QAAC,SAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,MAAM,EAAE,CACN;AACEE,QAAAA,IAAI,EAAE,OADR;AAEED,QAAAA,IAAI,EAAEA,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEE,GAAN,CAAWC,KAAD,IAAWA,KAAK,CAACC,KAA3B;AAFR,OADM,CAFV;AAQE,MAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE;AADD,SADA;AAIPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE,GADH;AAELC,UAAAA,KAAK,EAAE,GAFF;AAGLC,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EAAE;AADC,WAHJ;AAMLC,UAAAA,UAAU,EAAE;AANP,SAJA;AAYPC,QAAAA,IAAI,EAAE;AAAEF,UAAAA,IAAI,EAAE;AAAR,SAZC;AAaPG,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE,QADD;AAENN,UAAAA,KAAK,EAAE;AAFD,SAbD;AAiBPO,QAAAA,KAAK,EAAE;AACLL,UAAAA,IAAI,EAAE;AADD,SAjBA;AAoBPM,QAAAA,KAAK,EAAE;AACLC,UAAAA,UAAU,EAAE;AAAEP,YAAAA,IAAI,EAAE;AAAR,WADP;AAELQ,UAAAA,SAAS,EAAE;AAAER,YAAAA,IAAI,EAAE;AAAR,WAFN;AAGLS,UAAAA,MAAM,EAAE;AAAET,YAAAA,IAAI,EAAE;AAAR;AAHH;AApBA;AARX;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AA2CD;;GA7CMd,K;UACqBH,Q;;;KADrBG,K;AA+CP,eAAeA,KAAf","sourcesContent":["import { useQuery } from \"react-query\";\r\nimport { fetchCoinHistory } from \"./api\";\r\nimport ApexChart from \"react-apexcharts\";\r\n\r\ninterface ChartProps {\r\n  coinId: string;\r\n}\r\n\r\ninterface Historical {\r\n  time_open: string;\r\n  time_close: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n  market_cap: number;\r\n}\r\n\r\nfunction Chart({ coinId } : ChartProps) {\r\n    const {isLoading, data} = useQuery<Historical[]>([\"ohlcv\", coinId], () => fetchCoinHistory(coinId))\r\n    return (\r\n      <div>\r\n        {isLoading ? (\r\n          \"Loading chart...\"\r\n        ) : (\r\n          <ApexChart\r\n            type=\"line\"\r\n            series={[\r\n              {\r\n                name: \"Price\",\r\n                data: data?.map((price) => price.close),\r\n              },\r\n            ]}\r\n            options={{\r\n              theme: {\r\n                mode: \"dark\",\r\n              },\r\n              chart: {\r\n                height: 300,\r\n                width: 500,\r\n                toolbar: {\r\n                  show: true,\r\n                },\r\n                background: \"transparent\",\r\n              },\r\n              grid: { show: false },\r\n              stroke: {\r\n                curve: \"smooth\",\r\n                width: 4,\r\n              },\r\n              yaxis: {\r\n                show: false,\r\n              },\r\n              xaxis: {\r\n                axisBorder: { show: false },\r\n                axisTicks: { show: false },\r\n                labels: { show: false },\r\n              },\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Chart;"]},"metadata":{},"sourceType":"module"}