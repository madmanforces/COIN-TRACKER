{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HSJ\\\\Desktop\\\\nellflix\\\\my-app\\\\src\\\\routes\\\\Chart.tsx\",\n    _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"./api\";\nimport ApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chart(_ref) {\n  _s();\n\n  let {\n    coinId\n  } = _ref;\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading chart...\" : /*#__PURE__*/_jsxDEV(ApexChart, {\n      type: \"line\",\n      series: [{\n        name: \"Price\",\n        data: data === null || data === void 0 ? void 0 : data.map(price => price.close)\n      }],\n      options: {\n        theme: {\n          mode: \"dark\"\n        },\n        chart: {\n          height: 500,\n          width: 500,\n          background: \"transparent\"\n        },\n        grid: {\n          show: false\n        },\n        stroke: {\n          curve: \"smooth\",\n          width: 4\n        },\n        yaxis: {\n          show: false\n        },\n        xaxis: {\n          axisBorder: {\n            show: true\n          },\n          axisTicks: {\n            show: true\n          },\n          labels: {\n            show: true\n          },\n          type: \"datetime\",\n          categories: data === null || data === void 0 ? void 0 : data.map(price => price.time_close)\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            gradientToColors: [\"blue\"],\n            stops: [0, 100]\n          }\n        },\n        colors: [\"red\"],\n        tooltip: {\n          y: {\n            formatter: value => `$${value.toFixed(2)}`\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Chart, \"3/UYpjJNObciauUid8uIQ//UcYY=\", false, function () {\n  return [useQuery];\n});\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["C:/Users/HSJ/Desktop/nellflix/my-app/src/routes/Chart.tsx"],"names":["useQuery","fetchCoinHistory","ApexChart","Chart","coinId","isLoading","data","name","map","price","close","theme","mode","chart","height","width","background","grid","show","stroke","curve","yaxis","xaxis","axisBorder","axisTicks","labels","type","categories","time_close","fill","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,gBAAT,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;;AAmBA,SAASC,KAAT,OAAwC;AAAA;;AAAA,MAAzB;AAAEC,IAAAA;AAAF,GAAyB;AACtC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAsBN,QAAQ,CAAe,CAAC,OAAD,EAAUI,MAAV,CAAf,EAAkC,MACpEH,gBAAgB,CAACG,MAAD,CADkB,CAApC;AAEE,sBACE;AAAA,cACGC,SAAS,GACR,kBADQ,gBAGR,QAAC,SAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,MAAM,EAAE,CACN;AACEE,QAAAA,IAAI,EAAE,OADR;AAEED,QAAAA,IAAI,EAAEA,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEE,GAAN,CAAWC,KAAD,IAAWA,KAAK,CAACC,KAA3B;AAFR,OADM,CAFV;AAQE,MAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE;AADD,SADA;AAIPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE,GADH;AAELC,UAAAA,KAAK,EAAE,GAFF;AAGLC,UAAAA,UAAU,EAAE;AAHP,SAJA;AASPC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SATC;AAUPC,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE,QADD;AAENL,UAAAA,KAAK,EAAE;AAFD,SAVD;AAcPM,QAAAA,KAAK,EAAE;AACLH,UAAAA,IAAI,EAAE;AADD,SAdA;AAiBPI,QAAAA,KAAK,EAAE;AACLC,UAAAA,UAAU,EAAE;AAAEL,YAAAA,IAAI,EAAE;AAAR,WADP;AAELM,UAAAA,SAAS,EAAE;AAAEN,YAAAA,IAAI,EAAE;AAAR,WAFN;AAGLO,UAAAA,MAAM,EAAE;AAAEP,YAAAA,IAAI,EAAE;AAAR,WAHH;AAILQ,UAAAA,IAAI,EAAE,UAJD;AAKLC,UAAAA,UAAU,EAAErB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEE,GAAN,CAAWC,KAAD,IAAWA,KAAK,CAACmB,UAA3B;AALP,SAjBA;AAwBPC,QAAAA,IAAI,EAAE;AACJH,UAAAA,IAAI,EAAE,UADF;AAEJI,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,gBAAgB,EAAE,CAAC,MAAD,CAApB;AAA8BC,YAAAA,KAAK,EAAE,CAAC,CAAD,EAAG,GAAH;AAArC;AAFN,SAxBC;AA4BPC,QAAAA,MAAM,EAAE,CAAC,KAAD,CA5BD;AA6BPC,QAAAA,OAAO,EAAE;AACPC,UAAAA,CAAC,EAAE;AACDC,YAAAA,SAAS,EAAGC,KAAD,IAAY,IAAGA,KAAK,CAACC,OAAN,CAAc,CAAd,CAAiB;AAD1C;AADI;AA7BF;AARX;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD;;GAvDMnC,K;UACqBH,Q;;;KADrBG,K;AA2DP,eAAeA,KAAf","sourcesContent":["import { useQuery } from \"react-query\";\r\nimport { fetchCoinHistory } from \"./api\";\r\nimport ApexChart from \"react-apexcharts\";\r\n\r\ninterface Historical {\r\n  time_open: string;\r\n  time_close: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n  market_cap: number;\r\n}\r\n\r\ninterface ChartProps {\r\n  coinId: string;\r\n}\r\n\r\n\r\n\r\nfunction Chart({ coinId } : ChartProps) {\r\n  const { isLoading, data } = useQuery<Historical[]>([\"ohlcv\", coinId], () =>\r\n    fetchCoinHistory(coinId));\r\n    return (\r\n      <div>\r\n        {isLoading ? (\r\n          \"Loading chart...\"\r\n        ) : (\r\n          <ApexChart\r\n            type=\"line\"\r\n            series={[\r\n              {\r\n                name: \"Price\",\r\n                data: data?.map((price) => price.close),\r\n              },\r\n            ]}\r\n            options={{\r\n              theme: {\r\n                mode: \"dark\",\r\n              },\r\n              chart: {\r\n                height: 500,\r\n                width: 500,\r\n                background: \"transparent\",\r\n              },\r\n              grid: { show: false },\r\n              stroke: {\r\n                curve: \"smooth\",\r\n                width: 4,\r\n              },\r\n              yaxis: {\r\n                show: false,\r\n              },\r\n              xaxis: {\r\n                axisBorder: { show: true },\r\n                axisTicks: { show: true },\r\n                labels: { show: true },\r\n                type: \"datetime\",\r\n                categories: data?.map((price) => price.time_close),\r\n              },\r\n              fill: {\r\n                type: \"gradient\",\r\n                gradient: { gradientToColors: [\"blue\"], stops: [0,100] },\r\n              },\r\n              colors: [\"red\"],\r\n              tooltip: {\r\n                y: {\r\n                  formatter: (value) => `$${value.toFixed(2)}`,\r\n                },\r\n              },\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  \r\n  \r\n  export default Chart "]},"metadata":{},"sourceType":"module"}