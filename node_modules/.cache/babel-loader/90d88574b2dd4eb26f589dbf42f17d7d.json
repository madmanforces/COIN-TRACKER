{"ast":null,"code":"const BASE = `https://api.coinpaprika.com/v1`;\nexport function fetchCoins() {\n  return fetch(`${BASE}/coins`).then(response => response.json());\n}\nexport function fetchCoinInfo(coinId) {\n  return fetch(`${BASE}/coins/${coinId}`).then(response => response.json());\n}\nexport function fetchCoinTickers(coinId) {\n  return fetch(`${BASE}/tickers/${coinId}`).then(response => response.json());\n}\nexport function fetchCoinHistory(coinId) {\n  const endDate = Math.floor(Date.now()) / 1000;\n  return fetch(`${BASE}/coins/${coinId}/ohlcv/hus/historical`).then(response => response.json());\n}","map":{"version":3,"sources":["C:/Users/HSJ/Desktop/nellflix/my-app/src/routes/api.tsx"],"names":["BASE","fetchCoins","fetch","then","response","json","fetchCoinInfo","coinId","fetchCoinTickers","fetchCoinHistory","endDate","Math","floor","Date","now"],"mappings":"AAAA,MAAMA,IAAI,GAAI,gCAAd;AAGA,OAAO,SAASC,UAAT,GAAsB;AACzB,SAAOC,KAAK,CAAE,GAAEF,IAAK,QAAT,CAAL,CAAuBG,IAAvB,CAA6BC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAA1C,CAAP;AAED;AAGD,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAAuC;AAC5C,SAAOL,KAAK,CAAE,GAAEF,IAAK,UAASO,MAAO,EAAzB,CAAL,CAAiCJ,IAAjC,CAAuCC,QAAD,IAC3CA,QAAQ,CAACC,IAAT,EADK,CAAP;AAGD;AAED,OAAO,SAASG,gBAAT,CAA0BD,MAA1B,EAA0C;AAC/C,SAAOL,KAAK,CAAE,GAAEF,IAAK,YAAWO,MAAO,EAA3B,CAAL,CAAmCJ,IAAnC,CAAyCC,QAAD,IAC7CA,QAAQ,CAACC,IAAT,EADK,CAAP;AAGD;AAED,OAAO,SAASI,gBAAT,CAA0BF,MAA1B,EAA0C;AAC/C,QAAMG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,EAAX,IAAyB,IAAzC;AACA,SAAOZ,KAAK,CAAE,GAAEF,IAAK,UAASO,MAAO,uBAAzB,CAAL,CAAsDJ,IAAtD,CAA4DC,QAAD,IAChEA,QAAQ,CAACC,IAAT,EADK,CAAP;AAGD","sourcesContent":["const BASE = `https://api.coinpaprika.com/v1`;\r\n\r\n\r\nexport function fetchCoins() {\r\n    return fetch(`${BASE}/coins`).then((response) => response.json()\r\n    );\r\n  }\r\n\r\n\r\n  export function fetchCoinInfo(coinId: string) {\r\n    return fetch(`${BASE}/coins/${coinId}`).then((response) =>\r\n      response.json()\r\n    );\r\n  }\r\n  \r\n  export function fetchCoinTickers(coinId: string) {\r\n    return fetch(`${BASE}/tickers/${coinId}`).then((response) =>\r\n      response.json()\r\n    );\r\n  }\r\n\r\n  export function fetchCoinHistory(coinId: string) {\r\n    const endDate = Math.floor(Date.now()) / 1000\r\n    return fetch(`${BASE}/coins/${coinId}/ohlcv/hus/historical`).then((response) => \r\n      response.json()\r\n    );\r\n  }"]},"metadata":{},"sourceType":"module"}